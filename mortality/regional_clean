import csv
from pathlib import Path

#Cleaning Regional data
region_path_open = Path("data/downloaded_data/Regional_excel.csv")
region_path_write = Path(__file__).parent.parent.joinpath("data/clean_regional.csv")
fieldnames = ['Census Region', 'Year', 'Single Race 6', 'Education', 'Five-Year Age Groups', 'Deaths', '% of Total Deaths']

# Read the CSV file
with open(region_path_open, 'r', encoding='utf-8') as file:
    content = list(csv.DictReader(file))  # Store data in a list

# Write the cleaned data
with open(region_path_write, 'w', newline='', encoding='utf-8') as csv_file:
    writer = csv.DictWriter(csv_file, fieldnames=fieldnames)
    writer.writeheader()
    
    for row in content:
        cleaned_row = {
            'Census Region': row['Census Region'].strip().lower(),
            'Year': row['Year'].strip().lower(),
            'Single Race 6': row['Single Race 6'].strip().lower(),
            'Education': row['Education'].strip().lower() if row['Education'] != 'Not Available' else 'unknown',
            'Five-Year Age Groups': row['Five-Year Age Groups'].strip().lower(),
            'Deaths': row['Deaths'].strip().lower(),
            '% of Total Deaths': row['% of Total Deaths'].strip().lower()
        }
        writer.writerow(cleaned_row)
        # for row in reader:
#         state = row[0].lower().strip()
#         mortality_rate = row[2].strip()

#         if "data not available" in mortality_rate.lower():
#             mortality_rate = None
#         else:
#             mortality_rate = mortality_rate.replace('â€“', '-')  # replaces en-dash with hyphen
        
#         cleaned_data.append({
#             "state": state,
#             "mortality_rate": mortality_rate,
#             "unknown": row[3]  # keeping the unknown column as is until we figure out what it stands for 
#         })
        #row = row.replace('""""', '')  #Not working 
        #row = row.replace(',', '_')  # replace commas with underscores within the line
        
        #split by tab or space depending on the original format
        # columns = row.strip().lower()  # assuming columns are tab-separated
        
        # # write the cleaned line to the CSV
        # writer.writerow(columns)
        # print(f"Row {i}: {row.strip()}")
